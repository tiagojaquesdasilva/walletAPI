Resumo Curso API REST com Spring Boot utilizando TDD, CI E CD


REST - Representational State Transfer -tradução:Transferencia de estado Representacional

API considerada RESTfull(deve ter esses 4 requisitos):

PRINCIPIOS:
1-STATELES: Varia requisições com informações completas(independentes)
cliente -> internet ->servidor -> Banco de dados

2-CACHE: Dados pedidos recorrentemente que ficam armazenado para melhorar performace
cliente -> internet ->servidor -> cache

3-UNIFORM INTERFACE: Regras cliente<->servidor(ex:padronizar uri Json)

4-LAYRED SYSTEM: É uma arquitetura em camada, sem possivel ver apenas a camada imediata que está interagindo.


TDD é uma sigla para Test Driven Development, ou Desenvolvimento Orientado a Testes. A ideia do TDD é que você trabalhe em ciclos. Estes ciclos ocorrem na seguinte ordem:

1-Primeiro, escreva um teste unitário que inicialmente irá falhar, tendo em vista que o código ainda não foi implementado;
2-Crie o código que satisfaça esse teste, ou seja: implemente a funcionalidade em questão. Essa primeira implementação deverá satisfazer imediatamente o teste que foi escrito no ciclo anterior;
3-Quando o código estiver implementado e o teste satisfeito, refatore o código para melhorar pontos como legibilidade. Logo após, execute o teste novamente. A nova versão do código também deverá passar sem que seja necessário modificar o teste escrito inicialmente.

Mock chamada de metodo:
ex: BDDMockito.given(service.save(Mockito.any(User.class))).willReturn(getMockUser());


#Configurar e usar banco de dados
1-instalar PostgreSQL interface PgAdmin4
2-local: src\main\resources\application.properties
    sugestão de configuração
        spring.profile.active=dev

        spring.datasouce.url=jdbc:postgresql://localhost:5432/nomeBaseDados?user=postegres&password=senha //config de conexão
        spring.jpa.hibernate.ddl-auto=none //destivando atualização da base pelo hibernate

        spring.jpa.properties.hibernate.show_sql=true //mostrar o SQL executado no console
        spring.jpa.properties.hibernate.user_sql_comments=true
        spring.jpa.properties.hibernate.format_sql=true //formata o que for exibido
        spring.jpa.properties.hibernatetype=trace //nivel de retorno do processo
3-adicionar dependencia no pom.xml
    exemplo:<dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <scope>runtime</scope>
            </dependency>


#Adicionado um integrador de banco de dados(Flyway é uma ferramenta de migração de banco de dados)
1-cria pastas e arquivo .db
    sugestão: src\main\resources\application.properties\db\migration\postgresql\V1__init.sql
2-adicionar no pom.xml
    exemplo:<dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-core</artifactId>
            </dependency>

#Segurança
1-adicionar no pom.xml o spring-security
    exemplo: <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-security</artifactId>
            </dependency>
2-apartir de agora temos o Bcript disponivel, sendo possivel criptografar senha e tornando as rota segura/restritas.
3-com rotas restritas pode se liberalas temporariamente com a config a baixo e as devidas notations na classe -> @Configuration @EnableWebSecurity
    sugestão: "src\main\java\com\wallet\security\config\SecurityConfiguration.java" que extends "WebSecurityConfigurerAdapter"
    exemplo: @Override
             protected void configure(HttpSecurity http) throws Exception {
                 http.csrf().disable().exceptionHandling().and().sessionManagement()
                         .sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests()
                         .antMatchers("**")
                         .permitAll().anyRequest().authenticated();
             }
4-A implemntação da interface AuthenticationEntryPoint e o Override/sobrescrição do metodo "commence" serve para retornar uma mensagem prsonalisada quando o ususario não estiver acesso/autenticado.

5-A implementação da interface UserDetailsServicee o Override/sobrescrição do metodo "loadUserByUsername" tem por objetivo criar o "usuario" pelo email e se existir.

#Adicionando Swagger
1-adicionar no pom.xml o Swagger
      exemplo: <dependency>
                    <groupId>io.springfox</groupId>
                    <artifactId>springfox-swagger2</artifactId>
                    <version>2.6.1</version>
                </dependency>
                <dependency>
                    <groupId>io.springfox</groupId>
                    <artifactId>springfox-swagger-ui</artifactId>
                    <version>2.6.1</version>
                </dependency>
2-adicionar configuração("SwaggerConfig").
3-adicionando usuario desenvolvedor para liberar as rotas("V2__swagger-user.sql").
4-ajuste na classe de configuração do pacote de segurança para liberar roda para o swagger.

#Adicionando cache
1-adicionar no pom.xml o echache
      exemplo: <dependency>
                    <groupId>net.sf.ehcache</groupId>
                    <artifactId>ehcache</artifactId>
                </dependency>
1-adicionar notação no Application "@EnableCaching" que ira esperar um arquivo "ehcache.xml" colocado no resources.
2-adicionar na notação no service(@CacheEvict(value = "findByWalletAndType", allEntries = true)) para limpar o cache na busca do "findByWalletAndType".